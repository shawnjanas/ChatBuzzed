function ClientHandler() {
	this.idleClients = new Object();
	this.waitingClients = new Object();
	this.chattingRooms = new Object();
	this.idleCount = 0;
	this.chattingCount = 0;
	this.totalCount = 0;
	this.uRoomID = 0;
}

ClientHandler.prototype.createClient = function(client) {
	this.addIdleClient(client);
}
ClientHandler.prototype.onStart = function(client) {
	if(client._status == "idle") {
		trace("onStart");
		this.removeIdleClient(client);
		this.findPosMatch(client);
	}
}
ClientHandler.prototype.onStop = function(client) {
	trace("#onStop: " + client._status);
	if(client._status == "waiting") {
		client.call("onStoppedChatting",null,client._status);
		this.removeWaitingClient(client);
		this.addIdleClient(client);
	} else if(client._status == "chatting") {
		this.removeChatRoom(client._roomID);
		
		client.call("onStoppedChatting",null,client._status);
		trace("Call onStopChatting");
		
		chattingLast = client._chattingLast;
		client._chattingLast = null;
		
		chattingLast.call("onStopChatting",null,client._nickname);
		
		this.addIdleClient(client);
		this.findPosMatch(chattingLast);
		
		
	}
}
ClientHandler.prototype.onNext = function(client) {
	if(client._status == "chatting") {
		this.removeChatRoom(client._roomID);
		
		client.call("onStopChatting",null,client._nickname);
		client._chattingLast.call("onStopChatting",null,client._nickname);
		
		chattingLast = client._chattingLast;
		
		this.findPosMatch(client);
		this.findPosMatch(chattingLast);
	}
}
ClientHandler.prototype.onTyping = function(client) {
	if(client._status == "chatting") {
		client._chattingLast.call("onPartnerTyping",null);
	}
}
ClientHandler.prototype.onCameraRefresh = function(client) {
	if(client._status == "chatting") {
		client._chattingLast.call("onCameraRefresh",null,client._nickname);
	}
}

ClientHandler.prototype.findPosMatch = function(clientObj) {
	trace("#findPosMatch: " + clientObj._nickname);
	for(var n in this.waitingClients) {
		trace("Waiting Client: " + this.waitingClients[n]._nickname);
		if(clientObj._chattingLast == null || this.waitingClients[n]._chattingLast == null) {
			trace(clientObj._nickname+" start Chatting with "+this.waitingClients[n]._nickname);
			this.addChatRoom(this.createChatRoom(clientObj,this.waitingClients[n]));
			this.removeWaitingClient(this.waitingClients[n]);
			return;
		} else if(clientObj._chattingLast != this.waitingClients[n] || this.waitingClients[n]._chattingLast != clientObj) {
			trace(clientObj._nickname+" start Chatting with "+this.waitingClients[n]._nickname);
			this.addChatRoom(this.createChatRoom(clientObj,this.waitingClients[n]));
			this.removeWaitingClient(this.waitingClients[n]);
			return;
		}
	}
	this.addWaitingClient(clientObj);
	trace("Set as Waiting: " + clientObj._nickname);
}

ClientHandler.prototype.addIdleClient = function(client) {
	client._status = "idle";
	this.idleClients[client._id] = client;
}
ClientHandler.prototype.removeIdleClient = function(client) {
	delete this.idleClients[client._id];
}
ClientHandler.prototype.addWaitingClient = function(client) {
	client._status = "waiting";
	this.waitingClients[client._id] = client;
}
ClientHandler.prototype.removeWaitingClient = function(client) {
	delete this.waitingClients[client._id];
}
ClientHandler.prototype.addChatRoom = function(room) {
	this.chattingRooms[room._id] = room;
}
ClientHandler.prototype.removeChatRoom = function(room) {
	delete this.chattingRooms[room];
}

ClientHandler.prototype.createChatRoom = function(client1,client2) {
	var room = new Object();
	
	client1._chattingLast = client2;
	client2._chattingLast = client1;
	
	client1._roomID = this.uRoomID;
	client2._roomID = this.uRoomID;
	
	client1._status = "chatting";
	client2._status = "chatting";
	
	room._1 = client1;
	room._2 = client2;
	
	room._id = this.uRoomID;
	this.uRoomID++;
	
	client1.call("onStartChatting",null,{nickname:client2._nickname, faculty:client2._faculty, residence:client2._residence, ip:client2.ip, room:client2._roomID, admin:client2._admin, mirror:client2._mirror, flagged:"false"});
	client2.call("onStartChatting",null,{nickname:client1._nickname, faculty:client1._faculty, residence:client1._residence, ip:client1.ip, room:client1._roomID, admin:client1._admin, mirror:client1._mirror, flagged:"false"});
	
	return room;
}


ClientHandler.prototype.onBanned = function(client) {
	application.serv.addBannedUser(client.ip,client.nickname);
	this.onKick(client);
}
ClientHandler.prototype.onKicked = function(client) {
	var clientObj = this.findClient(client);
	trace(clientObj);
	if(clientObj != null) {
		clientObj.kickInterval = setInterval(kickOutUser, 1000, clientObj, this);
		clientObj.call("onKicked",null);
	}
	clientObj.serv.addFlaggedUser(client.ip,client.nickname);
}
function kickOutUser(clientObj, clientHandler) {
	application.disconnect(clientObj);
}
ClientHandler.prototype.findClient = function(client) {
	if(this.chattingRooms[client.room]._1._nickname == client.nickname) {
		return this.chattingRooms[client.room]._1;
	}
	if(this.chattingRooms[client.room]._2._nickname == client.nickname) {
		return this.chattingRooms[client.room]._2;
	}
	for(var n in this.chattingRooms) {
		if(this.chattingRooms[n]._1._nickname == nickname) {
			return this.chattingRooms[n]._1;
		} else if(this.chattingRooms[n]._2._nickname == nickname) {
			return this.chattingRooms[n]._2;
		}
	}
	for(var n in this.waitingClients) {
		if(this.waitingClients[n]._nickname == nickname) {
			return this.waitingClients[n];
		}
	}
	for(var n in this.idleClients) {
		if(this.idleClients[n]._nickname == nickname) {
			return this.idleClients[n];
		}
	}
	return null;
}



//Determines that numbers of clients in each group
ClientHandler.prototype.updateClientCount = function() {
	this.idleCount = 0;
	for(var n in this.idleClients) {
		this.idleCount++;
	}
	for(var n in this.waitingClients) {
		this.idleCount++;
	}
	this.chattingCount = 0;
	for(var n in this.chattingRooms) {
		this.chattingCount++;
		this.chattingCount++;
	}
	this.totalCount = this.idleCount + this.chattingCount;
	trace("Total: " + this.totalCount);
}